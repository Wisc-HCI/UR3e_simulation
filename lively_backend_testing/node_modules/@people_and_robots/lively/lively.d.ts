/* tslint:disable */
/* eslint-disable */
/**
*/
export class Solver {
  free(): void;
/**
* @param {string} urdf
* @param {any} objectives
* @param {any} root_bounds
* @param {any} shapes
* @param {any} initial_state
* @param {number | undefined} max_retries
* @param {number | undefined} max_iterations
* @param {any} collision_settings
*/
  constructor(urdf: string, objectives: any, root_bounds: any, shapes: any, initial_state: any, max_retries: number | undefined, max_iterations: number | undefined, collision_settings: any);
/**
* @param {any} state
* @param {any} weights
*/
  reset(state: any, weights: any): void;
/**
* @param {any} goals
* @param {any} weights
* @param {number} time
* @param {any} shape_updates
* @returns {any}
*/
  solve(goals: any, weights: any, time: number, shape_updates: any): any;
/**
* @returns {any}
*/
  updates(): any;
/**
* @returns {any}
*/
  computeAverageDistanceTable(): any;
/**
* @param {any} goal
* @param {any} origin
* @param {string} link
* @returns {any}
*/
  jacobianIk(goal: any, origin: any, link: string): any;
/**
* @param {any} state
* @returns {any}
*/
  forward(state: any): any;
/**
*/
  readonly currentGoals: any;
/**
*/
  readonly currentState: any;
/**
*/
  readonly joints: any;
/**
*/
  readonly links: any;
/**
*/
  objectives: any;
}
